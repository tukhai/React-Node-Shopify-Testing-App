import * as tslib_1 from "tslib";
import React from 'react';
import isEqual from 'lodash/isEqual';
import { ThemeContext } from '../../utilities/theme';
import { setColors } from '../../utilities/theme/utils';
const defaultTheme = {
    '--top-bar-background': '#00848e',
    '--top-bar-color': '#f9fafb',
    '--top-bar-background-lighter': '#1d9ba4',
};
export class ThemeProvider extends React.Component {
    constructor() {
        super(...arguments);
        this.state = {
            theme: setThemeContext(this.props.theme),
            colors: setColors(this.props.theme),
        };
    }
    componentDidUpdate({ theme: prevTheme }) {
        const { theme } = this.props;
        if (isEqual(prevTheme, theme)) {
            return;
        }
        // eslint-disable-next-line react/no-did-update-set-state
        this.setState({
            theme: setThemeContext(theme),
            colors: setColors(theme),
        });
    }
    render() {
        const _a = this.state.theme, { logo = null } = _a, rest = tslib_1.__rest(_a, ["logo"]);
        const { children } = this.props;
        const styles = this.createStyles() || defaultTheme;
        const theme = Object.assign({}, rest, { logo });
        return (<ThemeContext.Provider value={theme}>
        <div style={styles}>{React.Children.only(children)}</div>
      </ThemeContext.Provider>);
    }
    createStyles() {
        const { colors } = this.state;
        return colors
            ? colors.reduce((state, [key, value]) => (Object.assign({}, state, { [key]: value })), {})
            : null;
    }
}
function setThemeContext(ctx) {
    const { colors } = ctx, theme = tslib_1.__rest(ctx, ["colors"]);
    return Object.assign({}, theme);
}
