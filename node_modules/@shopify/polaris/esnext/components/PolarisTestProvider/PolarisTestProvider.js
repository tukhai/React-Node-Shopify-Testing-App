import React from 'react';
import { FrameContext } from '../../utilities/frame';
import { ThemeContext } from '../../utilities/theme';
import { ScrollLockManager, ScrollLockManagerContext, } from '../../utilities/scroll-lock-manager';
import { StickyManager, StickyManagerContext, } from '../../utilities/sticky-manager';
import { AppBridgeContext } from '../../utilities/app-bridge';
import { I18n, I18nContext } from '../../utilities/i18n';
import { LinkContext } from '../../utilities/link';
import { UniqueIdFactory, UniqueIdFactoryContext, globalIdGeneratorFactory, } from '../../utilities/unique-id';
export function PolarisTestProvider({ strict, children, i18n, appBridge, link, theme, frame, }) {
    const Wrapper = strict ? React.StrictMode : React.Fragment;
    const intl = new I18n(i18n || {});
    const scrollLockManager = new ScrollLockManager();
    const stickyManager = new StickyManager();
    const uniqueIdFactory = new UniqueIdFactory(globalIdGeneratorFactory);
    // This typing is odd, but as appBridge is deprecated and going away in v5
    // I'm not that worried about it
    const appBridgeApp = appBridge;
    const mergedTheme = createThemeContext(theme);
    const mergedFrame = createFrameContext(frame);
    return (<Wrapper>
      <I18nContext.Provider value={intl}>
        <ScrollLockManagerContext.Provider value={scrollLockManager}>
          <StickyManagerContext.Provider value={stickyManager}>
            <UniqueIdFactoryContext.Provider value={uniqueIdFactory}>
              <AppBridgeContext.Provider value={appBridgeApp}>
                <LinkContext.Provider value={link}>
                  <ThemeContext.Provider value={mergedTheme}>
                    <FrameContext.Provider value={mergedFrame}>
                      {children}
                    </FrameContext.Provider>
                  </ThemeContext.Provider>
                </LinkContext.Provider>
              </AppBridgeContext.Provider>
            </UniqueIdFactoryContext.Provider>
          </StickyManagerContext.Provider>
        </ScrollLockManagerContext.Provider>
      </I18nContext.Provider>
    </Wrapper>);
}
function noop() { }
function createThemeContext(theme = {}) {
    const { logo = null } = theme;
    return { logo };
}
function createFrameContext({ showToast = noop, hideToast = noop, setContextualSaveBar = noop, removeContextualSaveBar = noop, startLoading = noop, stopLoading = noop, } = {}) {
    return {
        showToast,
        hideToast,
        setContextualSaveBar,
        removeContextualSaveBar,
        startLoading,
        stopLoading,
    };
}
