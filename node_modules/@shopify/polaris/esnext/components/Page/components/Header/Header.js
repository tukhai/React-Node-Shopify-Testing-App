import React from 'react';
import debounce from 'lodash/debounce';
import { classNames } from '../../../../utilities/css';
import { buttonsFrom } from '../../../Button';
import { navigationBarCollapsed } from '../../../../utilities/breakpoints';
import { EventListener } from '../../../EventListener';
import { Breadcrumbs } from '../../../Breadcrumbs';
import { Pagination } from '../../../Pagination';
import { ActionMenu, hasGroupsWithActions } from '../../../ActionMenu';
import { Title } from './components';
import styles from './Header.scss';
export class Header extends React.PureComponent {
    constructor() {
        super(...arguments);
        this.state = {
            mobileView: isMobileView(),
        };
        this.handleResize = debounce(() => {
            const { state: { mobileView }, handleToggleMobile, } = this;
            if (mobileView !== isMobileView()) {
                handleToggleMobile();
            }
        }, 40, { leading: true, trailing: true, maxWait: 40 });
        this.handleToggleMobile = () => {
            const { mobileView } = this.state;
            this.setState({ mobileView: !mobileView });
        };
    }
    componentDidMount() {
        const { state: { mobileView }, handleToggleMobile, } = this;
        if (mobileView !== isMobileView()) {
            handleToggleMobile();
        }
    }
    render() {
        const { title, subtitle, titleMetadata, thumbnail, titleHidden = false, separator, primaryAction, pagination, breadcrumbs = [], secondaryActions = [], actionGroups = [], } = this.props;
        const { mobileView } = this.state;
        const breadcrumbMarkup = breadcrumbs.length > 0 ? (<div className={styles.BreadcrumbWrapper}>
          <Breadcrumbs breadcrumbs={breadcrumbs}/>
        </div>) : null;
        const paginationMarkup = pagination && !mobileView ? (<div className={styles.PaginationWrapper}>
          <Pagination {...pagination} plain/>
        </div>) : null;
        const navigationMarkup = breadcrumbMarkup || paginationMarkup ? (<div className={styles.Navigation}>
          {breadcrumbMarkup}
          {paginationMarkup}
        </div>) : null;
        const pageTitleMarkup = (<Title title={title} subtitle={subtitle} titleMetadata={titleMetadata} thumbnail={thumbnail}/>);
        const primaryActionMarkup = primaryAction ? (<div className={styles.PrimaryActionWrapper}>
        {buttonsFrom(primaryAction, {
            primary: true,
        })}
      </div>) : null;
        const actionMenuMarkup = secondaryActions.length > 0 || hasGroupsWithActions(actionGroups) ? (<div className={styles.ActionMenuWrapper}>
          <ActionMenu actions={secondaryActions} groups={actionGroups} rollup={mobileView}/>
        </div>) : null;
        const headerClassNames = classNames(styles.Header, titleHidden && styles.titleHidden, separator && styles.separator, navigationMarkup && styles.hasNavigation, actionMenuMarkup && styles.hasActionMenu, mobileView && styles.mobileView);
        return (<div className={headerClassNames}>
        {navigationMarkup}

        <div className={styles.MainContent}>
          <div className={styles.TitleActionMenuWrapper}>
            {pageTitleMarkup}
            {actionMenuMarkup}
          </div>

          {primaryActionMarkup}
        </div>

        <EventListener event="resize" handler={this.handleResize} passive/>
      </div>);
    }
}
// TODO: Can we instead get this from the <Frame />?
// Or perhaps store in Context to be shared across components?
function isMobileView() {
    return navigationBarCollapsed().matches;
}
